initial_db = [
    {
        "schema": "apolo",
        "db_name": "request",
        "db_description": "This database is designed to store and manage all IT Service Management (ITSM) related data, including service requests, change management records, problem tracking logs, user profiles, asset details, and workflow histories. It serves as the core backend for maintaining the lifecycle of IT operations and support activities.",
        "tables": [
            {
                "name": "request",
                "description": "Central table that tracks IT service requests throughout their lifecycle. Contains comprehensive metadata including creation and update timestamps, assignment details, priority levels, and status transitions. Links to multiple reference tables like status, priority, and category to facilitate ticket classification, routing, and resolution. User relationships are maintained through requesterid and technicianid fields that reference flotouser table. SLA compliance is tracked through dueby field and status transitions.",
                "columns": [
                    {
                        "name": "id",
                        "type": "bigint",
                        "description": "Primary key that uniquely identifies each service request record. Used as reference target for task.refid when task.refmodel refers to requests. Follows system-wide numbering sequence for consistent tracking across the platform."
                    },
                    {
                        "name": "updatedbyid",
                        "type": "bigint",
                        "description": "Foreign key referencing flotouser.id to identify who last modified the request. Essential for audit trail and accountability tracking. Updates automatically with each record modification."
                    },
                ]
            },
            {
                "name": "flotouser",
                "description": "Core user repository that stores all system user profiles. Maintains hierarchical relationships through managerid field and organizational context via departmentid and locationid references. Controls system access through authentication parameters and access level settings. User records connect to multiple operational tables including requests, changes, problems, and tasks through various foreign key relationships. Contains essential contact information and preferences that support notification workflows and reporting.",
                "columns": [
                    {
                        "name": "id",
                        "type": "bigint",
                        "description": "Primary key uniquely identifying each user record. Referenced by multiple tables including request.requesterid, request.technicianid, and task.technicianid to establish user relationships throughout the system."
                    },
                    {
                        "name": "updatedbyid",
                        "type": "bigint",
                        "description": "Self-referencing foreign key to flotouser.id that identifies which administrator last modified this user record. Important for security audit trails and compliance reporting."
                    },
                ]
            },
        ]
    }
]



processed_db = {
    "db_name": "flotoitsmdb", # initial_DB
    "db_description": "Some Description", # initial_DB
    "table_count": 10, # initial_DB
    "column_count": 100, # initial_DB
    "database_token_count": 100, # get_token_count(db name + db description)
    "tables_token_count": 1000, # get_token_count(table name + table description)
    "tables_token_count_with_columns_name": 10000,  # get_token_count(table name + table description + column name)
    "tables_token_with_columns_name_and_description_and_dt": 1000000, # get_token_count(table name + table description + column name + column description + columnDatatype)
    "tables" : [
        {
            "name": "Some Table 1", # initial_DB
            "description": "Some Table Description 1", # initial_DB
            "column_count": 10, # get_token_count(tablename and table description)
            "token_count": 100, # get_token_count(tablename and table description)
            "token_columns_with_columns_name" : 1000, # get_token_count(table name + table description + column name)
            "token_with_columns_name_and_description_and_dt" : 10000, # get_token_count(table name + table description + column name + column description + column datatype)
        
            "columns":[
                {
                    "name": "Some Column 1", # initial_DB
                    "description": "Some Column Description 1", # initial_DB
                    "data_type": "int", # initial_DB
                    "token_count": 10, # get_token_count(column name + column description)
                    "token_count_with_column_name" : 100, # get_token_count(column name + column description)
                    "token_count_with_column_name_and_description_and_dt" : 1000, # get_token_count(column name + column description + column datatype)
                },
                {
                    "name": "Some Column 2", # initial_DB
                    "description": "Some Column Description 2", # initial_DB
                    "data_type": "int", # initial_DB
                    "token_count": 20, # get_token_count(column name + column description)
                    "token_count_with_column_name" : 200, # get_token_count(column name + column description)
                    "token_count_with_column_name_and_description_and_dt" : 2000, # get_token_count(column name + column description + column datatype)
                },
            ],
        },
        
        {
            "name": "Some Table 2", # initial_DB
            "description": "Some Table Description 2", # initial_DB
            "column_count": 20, # get_token_count(tablename and table description)
            "token_count": 200, # get_token_count(tablename and table description)
            "token_columns_with_columns_name" : 2000, # get_token_count(table name + table description + column name)
            "token_with_columns_name_and_description_and_dt" : 20000, # get_token_count(table name + table description + column name + column description + column datatype)
        
            "columns": [
                {
                    "name": "Some Column 3", # initial_DB
                    "description": "Some Column Description 3", # initial_DB
                    "data_type": "int", # initial_DB
                    "token_count": 30, # get_token_count(column name + column description)
                    "token_count_with_column_name" : 300, # get_token_count(column name + column description)
                    "token_count_with_column_name_and_description_and_dt" : 3000, # get_token_count(column name + column description + column datatype)
                },
                {
                    "name": "Some Column 4", # initial_DB
                    "description": "Some Column Description 4", # initial_DB
                    "data_type": "int", # initial_DB
                    "token_count": 40, # get_token_count(column name + column description)
                    "token_count_with_column_name" : 400, # get_token_count(column name + column description)
                    "token_count_with_column_name_and_description_and_dt" : 4000, # get_token_count(column name + column description + column datatype)
                },
            ],
        }
    ]
}




# Helper funtions:
get_token_count_input = [
    {
        "table": "table1",
        "column": [
            "column_1",
            "column_2",
        ]
    },
    {
        "table": "table2",
        "column": None # Lets Asume this table have 50 Columns ( also if column is None then please take all column available into tab;es)
    }
]
    
get_token_count_output = {
    "table_count": 2, # Len of key tables
    "column_count": 52, # Sum of column_count from tables list
    "table_token_count": 300, # Sum of table list keys
    "table_token_count_with_columns_name": 3000, # Sum of table list keys
    "table_token_count_with_columns_name_description_dt": 30000, # Sum of table list keys
    "tables":[
        {
            "name" : "table1", # initial_DB
            "token_count": 150, # get_table_token_count
            "token_count_with_columns_name": 1500, # Sum of column list keys
            "token_count_with_columns_name_description_dt": 15000, # Sum of column list keys
            "column_count": 2, # len of columns key
            "columns": [
                {
                    "name": "column_1", # initial_DB
                    "token_count_with_columns_name": 675, # get_column_token_count
                    "token_count_with_columns_name_description_dt": 6750 # get_column_token_count
                },
                {
                    "name": "column_2", # initial_DB
                    "token_count_with_columns_name": 675, # get_column_token_count
                    "token_count_with_columns_name_description_dt": 6750 # get_column_token_count
                }
            ]
        }, 
        {
            "name": "table2", # initial_DB
            "token_count": 150, # get_table_token_count
            "token_count_with_columns_name": 1500, # Sum of column list keys
            "token_count_with_columns_name_description_dt": 15000, # Sum of column list keys
            "column_count": 50,  # len of columns key
            "columns": [
                {
                    "name": "column_1", # initial_DB
                    "token_count_with_columns_name": 675, # get_column_token_count
                    "token_count_with_columns_name_description_dt": 6750 # get_column_token_count
                },
                # Other 48 columns 0, 0, 0
                {
                    "name": "column_2", # initial_DB
                    "token_count_with_columns_name": 675, # get_column_token_count
                    "token_count_with_columns_name_description_dt": 6750 # get_column_token_count
                }
            ]
        }
    ]
}

def get_token_count(get_token_count_input):
    return get_token_count_output

def get_table_token_count(table_name):
    return 300

def get_column_token_count(table_name, column_name):
    return {"count_with_columns_name": 5, "count_with_columns_name_description_dt": 100}